#!/usr/bin/env python3

"""
Simple script to create a template for a blog post.

Quickly and easily create a template for a blog post. The template would have the bare
minimum information necessary for any blog post.

Author: Somraj Saha
License: GPL-3.0 (see https://github.com/Jarmos-san/dotfiles/blob/main/LICENSE for more
                  information)
"""

import datetime
import pathlib
import sys


def get_user_inputs() -> tuple[str, str, str]:
    """
    Get the user inputs to store the data for template generation.

    Parameters: None

    Returns:    None
    """
    title = input("Enter title of the blog: ")
    cover_image_url = input("Enter the URL of the cover image: ")
    cover_image_alt_text = input("Enter the alternate text of the cover image: ")

    return title, cover_image_url, cover_image_alt_text


def generate_template(title: str, img_url: str, alt: str) -> str:
    """
    Create the Markdown template based on user inputs.

    Parameters:
        title:   (string)     The title of the blog post.
        img_url: (string)     The URL of the cover image for the blog post.
        alt:     (string)     The alternate text for the cover image of the blog post.

    Returns:     (string)     Returns a string of Markdown content based on the user
                              inputs.
    """
    template = f"""---
title: {title}
description: Utilise ChatGPT to share a summary of the blog after its drafted!
publishedDate: {datetime.datetime.utcnow()}
coverImage:
  url: {img_url}
  alt: {alt}
---

## Second Level Heading

Write the contents of the blogpost here..."""

    return template


def create_markdown_file() -> None:
    """
    Create a Markdown file if one does not already exists.

    Parameters:     None

    Returns:        None
    """
    title, img_url, alt_text = get_user_inputs()

    filename = f"{title.lower().replace(' ', '-')}.md"
    filepath = (
        pathlib.Path.home()
        / "Projects"
        / "jarmos.dev"
        / "web"
        / "src"
        / "content"
        / "blog"
        / filename
    )

    template = generate_template(title=title, img_url=img_url, alt=alt_text)

    if filepath.exists():
        print(f"Similar blog exists at {filepath}! Please choose a different title...")
        sys.exit(1)

    with open(filepath, "x") as file:
        file.write(template)

    print(f"Blog template is generated at {filepath}")


def main() -> None:
    """
    Entrypoint of the script.

    Parameters:     None

    Returns:        None
    """
    try:
        create_markdown_file()
    except FileExistsError as error:
        raise error


if __name__ == "__main__":
    main()
