#!/usr/bin/env python3

"""
Simple script to create a template for a blog post.

Quickly and easily create a template for a blog post. The template would have the bare
minimum information necessary for any blog post.

Author: Somraj Saha
License: GPL-3.0 (see https://github.com/Jarmos-san/dotfiles/blob/main/LICENSE for more
                  information)
"""

import argparse
import datetime
import pathlib
import textwrap


def parse_arguments() -> argparse.Namespace:
    """Parse the CLI arguments passed to the script."""
    parser = argparse.ArgumentParser(
        description="Create a template blog post with minimal information to build upon"
    )

    # Positional argument to create a template from the filename passed to the script
    parser.add_argument(
        "filename",
        help='Name of the filename for the blog post, (like "example-blog-post")',
    )

    # Positional argument to handle the cover images of the blog posts
    cover_image_group = parser.add_argument_group(
        "cover image", description="Add cover image and its alternate text"
    )
    cover_image_group.add_argument("--href", help="The URL of the cover image")
    cover_image_group.add_argument(
        "--alt", help="The alternate text of the cover image"
    )

    return parser.parse_args()


def create_blogpost_path(filename: pathlib.Path) -> pathlib.Path:
    """Create the blog post's path to write the template to."""
    blogpost = pathlib.Path(
        f"{pathlib.Path.home()}/Projects/jarmos.dev/_blog/{filename}.md"
    )

    return blogpost


def generate_blogpost_template(
    slug: str,
    cover_image_href: str = "https://picsum.photos/1200/640",
    cover_image_alt: str = "Lorem ipsum dolor sit amet",
) -> str:
    """Generate the blog post's template to use when writing one."""
    template = textwrap.dedent(
        f"""\
        ---
        title: {slug.replace('-', " ").title()}
        summary: |
            Add a brief description of the blog post in not more than 160-250 words for
            SEO reasons.
        description: |
            Add a brief description of the blog post to showcase on the website itself.
        slug: {slug}
        publishedDate: {datetime.datetime.now().strftime('%Y-%m-%d')}
        image:
            href: {cover_image_href}
            alt: {cover_image_alt}
        ---

        # {slug.replace('-', " ").title()}

        ![{cover_image_alt}]({cover_image_href})
        """
    )

    return template


def write_blogpost_template(markdown_file: pathlib.Path, template: str) -> None:
    """Write the contents of the template to a file."""
    with open(markdown_file, "w") as file:
        file.write(template)

    print(f"Creating {markdown_file}")


def main() -> None:
    """Entrypoint function of the script."""
    # Parse the arguments passed to the script during invocation
    args = parse_arguments()

    # Create a Markdown file (in memory) to write the template contents in to
    blogpost = create_blogpost_path(filename=args.filename)

    # Generate the template before writing it to the Markdown file
    template = generate_blogpost_template(
        slug=blogpost.stem, cover_image_href=args.href, cover_image_alt=args.alt
    )

    if blogpost.exists():
        print(f"Not creating blog post template, {blogpost} exists already")
    else:
        # Write the Markdown to disk (from memory) using the template
        write_blogpost_template(markdown_file=blogpost, template=template)


if __name__ == "__main__":
    main()
