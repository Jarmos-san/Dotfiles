#!/usr/bin/env python3

"""
Easily update the system through a simple script.

Author: Somraj Saha
License: GPL-3.0 (see https://github.com/Jarmos-san/dotfiles/blob/main/LICENSE for more
         information)
"""


import platform
import subprocess


def is_tool_installed(tool: str) -> bool:
    """
    Check if a specified tool is installed and available on $PATH.

    tool (String): Name of the tool to check for its existence. Examples - "brew" or
                   "nvim"
    """
    try:
        subprocess.run(
            [tool, "--version"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            check=True,
        )
        return True
    except subprocess.CalledProcessError:
        return False


def run_brew_updates() -> None:
    """Run Homebrew to update the respective packages and then some cleanup actions."""
    subprocess.run(["brew", "update"])
    subprocess.run(["brew", "upgrade"])
    subprocess.run(["brew", "autoremove"])
    subprocess.run(["brew", "cleanup"])


def run_apt_updates() -> None:
    """Run APT to update a Debian/Ubuntu system and then some cleanup actions."""
    subprocess.run(["sudo", "apt-get", "update"])
    subprocess.run(["sudo", "apt-get", "upgrade", "--assume-yes"])
    subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])


def perform_linux_updates() -> None:
    """Run some automated system updates for Linux distros."""
    # Get the name of the OS the script is running on
    os_name = platform.freedesktop_os_release().get("NAME")

    match os_name:
        case "Ubuntu" | "Debian":
            run_apt_updates()

            if is_tool_installed("brew"):
                run_brew_updates()
        case _:
            print("Failed to identify the OS! Aborting system updates...")


def perform_macos_updates() -> None:
    """Run some automated system updates for MacOS."""
    subprocess.run(["sudo", "softwareupdate", "-i", "-a"])

    # Run Homebrew updates on a MacBook (or rather any Apple computer)
    if is_tool_installed("brew"):
        run_brew_updates()


def perform_neovim_updates() -> None:
    """Run some automated system update procedure for Neovim."""
    # FIXME: Doesn't work for whatever reason
    subprocess.run(["nvim", "--headless", '"+Lazy! sync"', "+qa"])


def upgrade_rust() -> None:
    """Upgrade Rust and its related tools."""
    try:
        subprocess.run(["rustup", "upgrade", "stable"])
    except subprocess.CalledProcessError as error:
        raise (error)


def main() -> None:
    """Entrypoint of the script."""
    # Detect the system name (like Linux or MacOS and so on) and store it in a variable
    system = platform.system()

    match system:
        case "Linux":
            perform_linux_updates()
        case "MacOS":
            perform_macos_updates()
        case _:
            print("Failed to identify the OS! Aborting system updates...")

    # Check if Neovim is installed and accessible, if so run some updates for it
    if is_tool_installed("nvim"):
        perform_neovim_updates()

    if is_tool_installed("rustup"):
        upgrade_rust()


if __name__ == "__main__":
    main()
