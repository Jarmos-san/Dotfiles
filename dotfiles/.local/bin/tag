#!/usr/bin/env python3

"""
Simple script to make Git tagging easier.

The script intelligently identifies the project configuration file (like "package.json"
or "pyproject.toml"), updates the project version and applies a Git Tag as well!

Author: Somraj Saha
License: MIT License
"""

import subprocess
from argparse import ArgumentParser, Namespace


def is_git_repository() -> bool | None:
    """Check if the current working directory is a Git repository or not."""
    try:
        command = subprocess.run(["git", "rev-parse", "--is-inside-work-tree"])

        if command.returncode == 0 and command.stdout.strip() == "true":
            return True
        else:
            return False
    except FileNotFoundError:
        print("Git not found...please install and ensure its available on $PATH")


def argument_parser() -> Namespace:
    """Parse the list of argument passed to the script and return them."""
    parser = ArgumentParser(description="Make Git tagging easy and quick.")

    parser.add_argument("name", help="The name of the tag")
    parser.add_argument("message", help="The message to annotate the tag with")

    return parser.parse_args()


def main() -> None:
    """Entrypoint of the script."""
    args = argument_parser()

    # TODO: Refactor the function to also update the project configuration files like
    # package.json, Cargo.toml, pyproject.toml and such with the tagged information

    if is_git_repository():
        subprocess.run(
            ["git", "tag", "--annotate", "sign", args.name, f"--message={args.message}"]
        )
    else:
        print("Not a Git directory...not tagging anything!")


if __name__ == "__main__":
    main()
