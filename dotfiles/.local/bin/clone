#!/usr/bin/env python3

"""
Simplied "git-clone" command.

Quickly and easily clone a remote Git repository to the local development environment
for further development. Creating a well-documented alias for the "clone" command using
Shell scripts was unweildy and hard to manage. Hence, this script come handy in that
regards!

Usage guidelines:

    Invoke the script like so "clone [remote repo] [local repo]" (assuming the script is
    in "PATH"). More specifically following is a detailed help documentation for the
    script.

    clone:      The command to invoke the script
    remote:     The name of the remote repository, on GitHub (example -
                "Jarmos-san/dotfiles")
    local:      The name of the local repository

Author: Somraj Saha
License: GPL-3.0 (see https://github.com/Jarmos-san/dotfiles/blob/main/LICENSE for more
                  information)
"""

import argparse
import pathlib
import re
import subprocess


def parse_args() -> argparse.Namespace:
    """Parse the arguments passed to the script and return a Namespace Object."""
    parser = argparse.ArgumentParser(description="Clone a remote GitHub repository!")

    # Add the positional arg "repo" to the "parser" Object
    parser.add_argument(
        "repo",
        help='The name of the remote repository, example - "Jarmos-san/dotfiles"',
    )

    # Add the optional flag "--dest" to the "parser" Object
    parser.add_argument(
        "--dest",
        help="The local destination to clone the repository to",
        required=False,
        type=pathlib.Path,
    )

    return parser.parse_args()


def validate_repo_format(repo: str) -> None:
    """Validate the format of the repo argument using regular expressions."""
    pattern = r"^[A-Za-z0-9-]+/[A-Za-z0-9-]+$"

    if not re.match(pattern, repo):
        raise ValueError(
            'The "repo" argument should be in the format "username/repository".'
        )


def invoke_git_clone(
    repo: argparse.Namespace, destination: argparse.Namespace | None
) -> None:
    """Wrapr the "git-clone" command for invocation."""
    if not destination:
        subprocess.run(
            ["git", "clone", f"git@github.com:{repo}", f"{destination}"],
            check=True,
        )
    else:
        subprocess.run(
            ["git", "clone", f"git@github.com:{repo}", f"{destination}"], check=True
        )


def main() -> None:
    """Invoke the entrypoint of the script."""
    # Parse all the flags and args to the "clone" script
    args = parse_args()

    # Validate the value passed to the "repo" positional argument is proper
    validate_repo_format(args.repo)

    # Invoke the "git-clone" command if the validation passes
    invoke_git_clone(repo=args.repo, destination=args.dest)


if __name__ == "__main__":
    main()
