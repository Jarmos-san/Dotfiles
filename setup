#!/usr/bin/env bash
#
# Script to install Neovimulus on a user's local machine automatically.
#
# Author: Somraj Saha
# License: MIT License
# (see https://github.com/Jarmos-san/neovimulus/blob/main/LICENSE for info).

set -euo pipefail

# Some colour codes to make the formatted output prettier.
readonly RED="\033[0;31m"
readonly GREEN="\033[0;32m"
readonly YELLOW="\033[0;33m"
readonly BLUE="\033[0;34m"
readonly NOCOLOR="\033[0m"

# Location of the local directory to store the dotfiles in
readonly DOTFILES_DIR="$HOME/.dotfiles"

###############################################################################
# Remove all unnecessary artifacts created by the script upon
# successful execution.
###############################################################################
cleanup() {
  # Remove the font files which were downloaded for pre-setup of
  # the local machine.
  rm --recursive --force cascadia cascadia.zip
}

###############################################################################
# Wrapper function to more easily output an error message to STDERR.
#
# Arguments:
#   The message to echo to STDERR.
#
# Outputs:
#   An ANSI colour code formatted message to print to STDERR based on
#   the message which is passed to the function as a parameter.
###############################################################################
function error() {
  echo -e "${RED}[ERROR]${NOCOLOR} $1"
}

###############################################################################
# Wrapper function to easily print a warning to STDOUT.
#
# Arguments:
#   The message to echo to STDOUT.
#
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
###############################################################################
function warn() {
  echo -e "${YELLOW}[WARN]${NOCOLOR} $1"
}

###############################################################################
# Wrapper function to easily print a success to STDOUT.
#
# Arguments:
#   The message to echo to STDOUT.
#
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
###############################################################################
function success() {
  echo -e "${GREEN}[SUCCESS]${NOCOLOR} $1"
}

###############################################################################
# Wrapper function to easily print a success to STDOUT.
#
# Arguments:
#   The message to echo to STDOUT.
#
# Outputs:
#   An ANSI colour code formatted message to print to STDOUT based on
#   the message which is passed to the function as a parameter.
###############################################################################
function info() {
  echo -e "${BLUE}[INFO]${NOCOLOR} $1"
}

###############################################################################
# Download Docker and set it up on the local machine to be useable as
# a non-root user.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function install_docker() {
  readonly docker_download_url="https://download.docker.com/linux/ubuntu"

  # Check what version of Ubuntu is used
  ubuntu_release="$(lsb_release --codename --short)"

  # Add the Docker GPG key to the APT key lists
  curl --fail --silent --show-error --location "$docker_download_url/gpg" \
    | apt-key add -

  # Add the Docker APT repository for downloading the Docker binary
  add-apt-repository "deb [arch=amd64] $docker_download_url $ubuntu_release stable"

  # Download Docker and related tools from the APT repository
  apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin \
    docker-compose-plugin

  # Ensure the "docker" command can be invoked without using "sudo" each time
  groupadd docker && usermod --append --groups docker "$USER" && newgrp docker
}

###############################################################################
# Download the Cascadia Code Nerd Font & set it up for usage in the local
# machine.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function install_fonts() {
  cascadia_code_download_url="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.0/CascadiaCode.zip"
  cascadia_code_zip_file="cascadia.zip"

  # Command to download the zipped file containing the font assets
  curl --fail --silent --show-error --location --output \
    $cascadia_code_zip_file $cascadia_code_download_url

  if [[ -d $cascadia_code_zip_file ]]; then
    # Extract the contents of the downloaded zipped file
    unzip $cascadia_code_zip_file -d cascadia

    # Move the necessary font assets to the required location
    mv cascadia/*.ttf "$HOME/.fonts"
  fi

  # Ensure the system is aware of the newly loaded fonts
  fc-cache --force -verbose
}

###############################################################################
# Donwload Flatpak packages from FlatHub for certain Linux distros like Ubuntu.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function install_flatpak_packages() {
  # List of Flatpak GUI applications which cannot be installed through Homebrew on Linux
  flatpak_packages=(
    'com.microsoft.Edge'
    'com.spotify.Client'
    'com.discordapp.Discord'
    'com.transmissionbt.Transmission'
    'org.wezfurlong.wezterm'
    'com.calibre_ebook.calibre'
    'com.valvesoftware.Steam'
    'org.flameshot.Flameshot'
    'com.visualstudio.code'
    'io.dbeaver.DBeaverCommunity'
  )

  # Loop through the aforementioned list of packages to install them only if
  # the system is a Linux distro.
  if [[ ! "$OS" == "WSL" ]] && [[ ! "$OS" == "Darwin" ]]; then
    for package in "${flatpak_packages[@]}"; do
      flatpak install --assumeyes flathub "$package"
    done
  fi
}

###############################################################################
# Setup the Homebrew taps and download all necessary packages from Homebrew.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function install_homebrew_packages() {
  readonly taps=(
    "eth-p/software" "go-task/tap" "homebrew/bundle" "homebrew/core"
  )

  readonly formulae=(
    "act" "azure-cli" "cmatrix" "exa" "fd" "gcc" "gh" "glow" "httpie" "htop"
    "lua@5.1" "mdbook" "neofetch" "neovim" "poetry" "pre-commit" "ripgrep"
    "starship" "tmux" "shellcheck" "stow" "zsh"
  )

  # Install some of the Homebrew taps
  for tap in "${taps[@]}"; do
    brew install "$tap"
  done

  # Install the Homebrew formulae
  for formula in "${formulae[@]}"; do
    brew install "$formula"
  done
}

###############################################################################
# Download and setup some ZSH plugins for local usage.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function install_zsh_plugins() {
  # List of ZSH plugins
  readonly zsh_plugins=(
    'zsh-users/zsh-syntax-highlighting'
    'zsh-users/zsh-autosuggestions'
    'zsh-users/zsh-completions'
    'le0me55i/zsh-extract'
    'ael-code/zsh-colored-man-pages'
  )

  # Location to store the ZSH plugins
  readonly zsh_plugins_dir="${ZDOTDIR:-$HOME}/.zsh/plugins"

  # Check for the existence of the local ZSH directory, if not then create it
  if [[ ! -d $zsh_plugins_dir ]]; then
    mkdir --parents "$zsh_plugins_dir"
  fi

  # Download the listed ZSH plugins to a local directory for usage
  if command -v git >/dev/null 2>&1; then
    for plugin in "${zsh_plugins[@]}"; do
      git clone "git@github.com:${plugin}" "$zsh_plugins_dir"
    done
  else
    error "Failed to download ZSH plugins..."
  fi
}

###############################################################################
# Fetch the dotfiles from the remote repository and set them up locally.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function setup_dotfiles() {
  readonly dotfiles_dir="$HOME/.dotfiles"

  # Check if Git is installed then clone the remote dotfiles repository
  if ! command -v git >/dev/null 2>&1; then
    error "Git not found...please ensure its installed & available on \$PATH!"
  else
    git clone git@github.com:Jarmos-san/dotfiles "$dotfiles_dir"
  fi

  # Check if the ".dotfiles" directory exists and if its contents are symlinks
  if [[ -d "$dotfiles_dir" ]]; then
    for file in "$dotfiles_dir"/*; do
      if [[ ! -L "$file" ]]; then
        unlink "$file"
      fi
    done
  else
    error "The $dotfiles_dir directory was not found..."
  fi

  # Create the symlinks from the dotfiles repository
  cd "$dotfiles_dir" && stow dotfiles && cd -
}

###############################################################################
# Fetch the dotfiles from the remote repository and set them up locally.
#
# Arguments:
#   None
#
# Outputs:
#   None
###############################################################################
function setup_gh_plugins() {
  readonly gh_completions="{$ZDOTDIR:-$HOME}.zsh/plugins/zsh-completions/src/_gh"
  readonly gh_plugins=(
    "seachicken/gh-poi"
    "yusukebe/gh-markdown-preview"
    "chelnak/gh-changelog"
    "redraw/gh-install"
    "vilmibm/gh-screensaver"
    "k1LoW/gh-grep"
    "HaywardMorihara/gh-tidy"
  )

  if [[ ! -f "$gh_completions" ]]; then
    gh completion --shell zsh >"$gh_completions"
  else
    echo "GitHub CLI completions failed to generate...skipping"
  fi

  # Setup some GitHub CLI extensions (or "plugins")
  for plugin in "${gh_plugins[@]}"; do
    gh extension install "$plugin"
  done
}

function setup_rust() {
  # TODO: Write function to download Rust (the programming language)
  echo "Hello World!"
}

function setup_gpg() {
  # TODO: Write function to setup the GPG keys to GitHub
  echo "Hello World!"
}

function setup_ssh() {
  # TODO: Write function to setup SSH keys to authenticate to GitHub
  echo "Hello World!"
}

#####################################################################
# Entrypoint of the script to invoke with all the arbitrary
# parameters the script can be invoked with.
# Arguments:
#   None
# Outputs:
#   None
#####################################################################
function main() {
  readonly homebrew_install_script="https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"

  # List of essential packages
  readonly essential_packages=(
    "git" "curl" "flatpak" "ca-certificates" "gnupg"
  )

  # Logic to identify what the OS type is for further execution logic
  case "$(uname -a)" in
    *Microsoft*) readonly OS="WSL" ;;
    Linux*) readonly OS="Linux" ;;
    Darwin*) readonly OS="MacOS" ;;
    *) readonly OS="" ;;
  esac

  # Download the list of essential tools if the distro is Ubuntu
  if [[ ! "$OS" == "Darwin" ]] && [[ ! "$OS" == "" ]] && ! command -v apt-get; then
    error "Some essential tools were not installed..."
    info "Please install the following tools manually before invoking the automation script ..."

    for package in "${essential_packages[@]}"; do
      echo "$package"
    done

    exit 1
  else
    info "Downloading some essential tools before setting up the system..."

    for package in "${essential_packages[@]}"; do
      if ! command -v "$package"; then
        apt-get install "$package"
      fi
    done
  fi

  # Refactored portion
  info "Starting local development environment setup now..."

  # Logic to update the system before setting up the development environment
  if [[ "$OS" == "WSL" ]] && [[ "$OS" == "Linux" ]] && [[ $(command -v apt-get) ]]; then
    info "Updating system packages..."
    apt-get update --yes && apt-get upgrade --yes
  else
    warn "System update failed...please ensure to do afterwards"
  fi

  # Download Docker for native Linux development machines only
  if ! [[ "$OS" == "WSL" ]] && ! [[ "$OS" == "MacOS" ]]; then
    info "Installing and setting up Docker..."
    install_docker
    success "Docker installation complete!"
  fi

  # Logic to download and setup some patched Nerd Font
  if ! [[ "$OS" == "WSL" ]] || ! [[ "$OS" == "MacOS" ]]; then
    info "Setting patched Nerd Fonts for local usage..."
    install_fonts
    success "Fonts installation and setup complete!"
  fi

  # Logic to download Flatpak packages from FlatHub
  if ! command -v flatpack &>/dev/null; then
    error "Flatpak was not found in your system!"
  else
    info "Installing Flatpak packages from FlatHub..."
    install_flatpak_packages
  fi

  # Logic to download & setup ZSH plugins
  info "Downloading and setting up ZSH plugins"
  install_zsh_plugins

  # Install Homebrew if its not already available
  if ! command -v brew &>/dev/null; then
    /bin/bash -c \
      "$(curl --fail --silent --show-error --location $homebrew_install_script)"
    install_homebrew_packages
  else
    error "Homebrew installation failed..."
  fi

  # Logic to setup the dotfiles on the local machine
  if ! command -v stow &>/dev/null; then
    info "Setting up the dotfiles..."
    setup_dotfiles
    success "Dotfiles setup complete..."
  fi

  # Logic to install and setup GitHub CLI plugins
  if ! command -v gh &>/dev/null; then
    error "GitHub CLI not installed...skipping plugin installation as well!"
  else
    setup_gh_plugins
  fi

  success "Automated system setup complete...please restart the system now!"
}

main

trap cleanup EXIT
