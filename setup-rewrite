#!/usr/bin/env python3

"""
Script to automatically setup a fresh new Linux/MacOS system (or VM).

This script should ONLY be used after installing a fresh new OS on a new machine or
inside a VM to setup a development environment automatically. The script will install
necessary tools like Code Editors, package managers and more before setting up their
configuration files automatically.

USAGE: To use the script, run the following command (its not ready for usage yet);

curl -fsSL https://raw.githubusercontent.com/<username>/<repository>/path/to/script \
    | python3 - --dry-run

NOTE: The script is designed to be subjective, hence it is RECOMMENDED to NOT invoke it
without understanding the context of the contents! Please read through the script or
reach out to the author for clarification on what certain parts of the script does.

DISCLAIMER: The script IS NOT TESTED and there is no guranteed it works properly!

Author: Somraj Saha <somraj.saha@weburz.com>
License: MIT (see the LICENSE document for more info on this regards)
"""

import platform
import subprocess
import time
from argparse import ArgumentParser, Namespace


def argument_parser() -> Namespace:
    """Parse the list of arguments passed to the script and return them."""
    parser = ArgumentParser(
        description="Automation script to setup a dev environment on a new machine!"
    )

    parser.add_argument(
        "--dry-run",
        required=False,
        help="Enable the script without making serious changes to the system.",
        action="store_true",
    )

    return parser.parse_args()


def system_update_simulate() -> None:
    """Simulate a system update (when the "dry_run" arguments are passed)."""
    print("Simulating system updates...")

    # Print a bunch of dots across 10 lines for roughly around 30 secs
    for _ in range(10):
        print("...")
        time.sleep(3)

    print("System upgrade simulation complete...")


def run_apt_updates(dry_run: bool) -> None:
    """
    Run APT to update a Debian/Ubuntu system and perform some cleanup actions.

    dry_run (boolean): Flag to configure the apt-get statements to run either in dry
                       mode or not.
    """
    if not dry_run:
        subprocess.run(["sudo", "apt-get", "update"])
        subprocess.run(["sudo", "apt-get", "upgrade", "--assume-yes"])
        subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])
    else:
        # TODO: Use the logging module instead of using print statements
        system_update_simulate()


        print("System upgrade simulation complete...")


def run_system_updates(dry_run: bool = True) -> None:
    """
    Detect the Operating System name and run some system updates on it.

    dry_run (boolean): Defaults to True which configures the function to run system
                       updates in dry mode explicitly.
    """
    if platform.system() == "Linux":
        os_name = platform.freedesktop_os_release().get("NAME")

        match os_name:
            case "Ubuntu" | "Debian":
                run_apt_updates(dry_run=dry_run)
            case _:
                print("Failed to identify the OS...aborting system updates!")


def main() -> None:
    """Entrypoint of the script."""
    args = argument_parser()

    if not args.dry_run:
        run_system_updates(dry_run=False)
    else:
        print('Running script in "dry" mode...')
        run_system_updates()


if __name__ == "__main__":
    main()
