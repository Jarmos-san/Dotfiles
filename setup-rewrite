#!/usr/bin/env python3

"""
Script to automatically setup a fresh new Linux/MacOS system (or VM).

This script should ONLY be used after installing a fresh new OS on a new machine or
inside a VM to setup a development environment automatically. The script will install
necessary tools like Code Editors, package managers and more before setting up their
configuration files automatically.

USAGE: To use the script, run the following command (its not ready for usage yet);

curl -fsSL https://raw.githubusercontent.com/<username>/<repository>/path/to/script \
    | python3 - --dry-run

NOTE: The script is designed to be subjective, hence it is RECOMMENDED to NOT invoke it
without understanding the context of the contents! Please read through the script or
reach out to the author for clarification on what certain parts of the script does.

DISCLAIMER: The script IS NOT TESTED and there is no guranteed it works properly!

Author: Somraj Saha <somraj.saha@jarmos.dev>
License: MIT (see the LICENSE document for more info on this regards)
"""

# TODO: Make use of the logging module instead of useless print statements

import platform
import subprocess
import time
from argparse import ArgumentParser, Namespace
from io import BytesIO
from pathlib import Path
from urllib.request import urlopen
from zipfile import ZipFile

# Fetch and store the OS name to be used later on in the script (Linux ONLY)
OS_NAME = platform.freedesktop_os_release().get("NAME")


# Message labels with appropriate terminal colours to showcase its importance
ERROR = "\033[0;31m[ERROR]\033[0m"
SUCCESS = "\033[0;32m[SUCCESS]\033[0m"
WARNING = "\033[0;33m[WARNING]\033[0m"
INFO = "\033[0;34m[INFO]\033[0m"


def argument_parser() -> Namespace:
    """Parse the list of arguments passed to the script and return them."""
    parser = ArgumentParser(
        description="Automation script to setup a dev environment on a new machine!"
    )

    parser.add_argument(
        "--dry-run",
        required=False,
        help="Enable the script without making serious changes to the system.",
        action="store_true",
    )

    return parser.parse_args()


def simulate_dry_run() -> None:
    """Simulate dry runs of various functionalities like system updates and more."""
    # TODO: Refactor the entire script to remove each "dry run" capabilities from the
    # functions below and apply those in this single function instead to be DRY
    print(f'{INFO} Running the script in simulation (or a "dry run") mode')
    time.sleep(1)

    # TODO: Detect OS and simulate update accordingly
    print(f"{INFO} Simulating system updates...")
    for _ in range(10):
        print("...")
        time.sleep(1)
    print(f"{SUCCESS} System updates complete...")


def is_tool_installed(tool: str) -> bool:
    """
    Check if a tool is installed and executable.

    tool (String): The name of the tool to check for its availability
    """
    try:
        subprocess.run(
            [tool, "--version"],
            check=True,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE,
        )
        return True
    except subprocess.CalledProcessError as error:
        raise error


def run_apt_updates() -> None:
    """Run APT to update a Debian/Ubuntu system and perform some cleanup actions."""
    try:
        subprocess.run(["sudo", "apt-get", "update"])
        subprocess.run(["sudo", "apt-get", "upgrade", "--assume-yes"])
        subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])
    except subprocess.CalledProcessError as error:
        print(f"{ERROR} APT failed to update the packages...\n{error}")


def run_macos_updates() -> None:
    """Automate MacOS system updates."""
    try:
        subprocess.run(["sudo", "softwareupdate", "-i", "-a"])
    except subprocess.CalledProcessError as error:
        print(f"{ERROR} MacOS system update failed...\n{error}")


def run_system_updates() -> None:
    """Detect the Operating System name and run some system updates on it."""
    if platform.system() == "Linux":
        match OS_NAME:
            case "Ubuntu" | "Debian":
                run_apt_updates()
            case _:
                print(f"{ERROR} Failed to identify the OS...aborting!")
    elif platform.system() == "MacOS":
        run_macos_updates()


def install_system_essentials() -> None:
    """Install certain essentials necessary for proper functioning of the system."""
    match OS_NAME:
        case "Ubuntu" | "Debian":
            try:
                subprocess.run(
                    [
                        "sudo",
                        "apt-get",
                        "install",
                        "curl",
                        "git",
                        "--yes",
                        "--no-install-recommends",
                    ]
                )
            except subprocess.CalledProcessError as error:
                print(f"{ERROR} Failed to install essential tools...\n{error}")
        case _:
            print(f"{ERROR} Failed to identify OS...aborting!")


def install_homebrew() -> None:
    """Install HomeBrew on MacOS and Ubuntu/Debian systems."""
    homebrew_installation_url = (
        "https://raw.githubusercontent.com/Homebrew/install/master/install.sh"
    )
    curl_command = (
        f"curl --fail --silent --show-error --location ${homebrew_installation_url}"
    )

    # Install Homebrew only for MacOS and Ubuntu/Debian systems
    if not platform.system() == "MacOS" or not platform.system() == "Linux":
        print(f"{INFO} Skipping Homebrew installation on unsupported OS")
        pass
    else:
        try:
            subprocess.run(
                ["NONINTERACTIVE=1 ", "/bin/bash", "-c", f'$"({curl_command})"']
            )
        except subprocess.CalledProcessError as error:
            print(f"{ERROR} Failed to install Homebrew...\n{error}")


def install_fonts() -> None:
    """Install certain fonts and make them available for use in the system."""
    url = "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/CascadiaCode.zip"
    fonts_dir = Path(f"{Path.home()}/.fonts")

    if not platform.system() == "Linux" or platform.system() == "MacOS":
        print(f"{INFO} Failed to identify OS...skipping fonts setup!")
        pass
    else:
        with urlopen(url=url) as res:
            print(f"{INFO} Downloading fonts...please wait!")

            # Store the buffered contents from the HTTPS response in a variable
            contents = BytesIO(res.read())

            # Create a zipped file from the buffered contents
            zipfile = ZipFile(contents)

            # If the "~/.fonts" directory doesn't exists, create it before
            # extracting the zipped contents
            if not fonts_dir.exists() and not fonts_dir.is_dir():
                Path.mkdir(fonts_dir)

            # Extract the zipped contents to the "~/.fonts" directory
            zipfile.extractall(fonts_dir)

            # Refresh the font cache for the OS to know where to look for the new
            # fonts
            try:
                subprocess.run(["fc-cache", "--force"])
            except subprocess.CalledProcessError as error:
                print(f"{ERROR} Failed to update the fonts cache...\n{error}")

            print("Fonts download and setup complete!")


def install_brew_packages() -> None:
    """Install Homebrew packages."""
    taps = (
        "eth-p/software",
        "go-task/tap",
        "homebrew/bundle",
        "homebrew/core",
        "xo/xo",
    )

    casks = ("visual-studio-code", "spotify", "discord", "inkscape", "dbeaverlite")

    formulae = (
        "azure-cli",
        "btop",
        "cmatrix",
        "cookiecutter",
        "exa",
        "gcc",
        "gh",
        "httpie",
        "lua@5.1",
        "mdbook",
        "neofetch",
        "neovim",
        "oci-cli",
        "poetry",
        "pre-commit",
        "ripgrep",
        "rust",
        "starship",
        "shellcheck",
        "usql",
        "zsh",
    )

    # INFO: Check if Homebrew is installed and invocable
    if not is_tool_installed("brew"):
        print(f"{ERROR} Homebrew not found (not installed perhaps?)...aborting!")
    else:
        # INFO: Install "taps" for Homebrew to fetch the packages (formulae) from
        for tap in taps:
            try:
                subprocess.run(["brew", "install", tap])
            except subprocess.CalledProcessError as error:
                print(f"{ERROR} Failed to install Homebrew taps...\n{error}")

        # INFO: Install "formulae" using Homebrew for both Linux and MacOS systems
        for formula in formulae:
            try:
                subprocess.run(["brew", "install", formula])
            except subprocess.CalledProcessError as error:
                print(f"{ERROR} Failed to install formulae...\n{error}")

        # INFO: Installation of "casks" (GUI tools) are ONLY supported on MacOS!
        if platform.system() == "MacOS":
            for cask in casks:
                try:
                    subprocess.run(["brew", "install", cask])
                except subprocess.CalledProcessError as error:
                    print(f"{ERROR} Failed to install casks...\n{error}")


def install_flatpak() -> None:
    """Install Flatpak if its not available on Linux distros."""
    flatpak_repo = "https://flathub.org/repo/flathub.flatpakrepo"

    # INFO: Attempt to install Flatpak ONLY on Linux distros & not WSL, if not available
    if platform.system() == "Linux" and not is_tool_installed("flatpak"):
        match OS_NAME:
            case "Ubuntu" | "Debian":
                try:
                    subprocess.run(["apt-get", "install", "flatpak"])
                except subprocess.CalledProcessError as error:
                    print(f"{ERROR} Failed to install Flatpak...\n{error}")
            case _:
                print(f"{ERROR} Unknown OS...skipping Flatpak installation")
                pass

        # INFO: Attemp to update the remote Flatpak repository locally
        try:
            subprocess.run(
                ["flatpak", "remote-add", "-if-not-exists", "flathub", flatpak_repo]
            )
        except subprocess.CalledProcessError as error:
            print(f"{ERROR} Failed to update Flatpak repository locally...\n{error}")


def install_flatpak_packages() -> None:
    """Install Flatpak packages on Linux distros."""
    packages = (
        "com.calibre_ebook.calibre"
        "com.discordapp.Discord"
        "org.flameshot.Flameshot"
        "com.microsoft.Edge"
        "com.github.KRTirtho.Spotube"
        "com.transmissionbt.Transmission"
        "com.valvesoftware.Steam"
        "com.visualstudio.code"
        "io.dbeaver.DBeaverCommunity"
        "org.wezfurlong.wezterm"
    )

    if not is_tool_installed("flatpak"):
        print(f"{WARNING} Flatpak not found")
    else:
        for package in packages:
            try:
                subprocess.run(
                    ["flatpak", "install", "--assumeyes", "flathub", package]
                )
            except subprocess.CalledProcessError as error:
                print(f"{ERROR} Failed to install packages from Flatpak...\n{error}")


def install_zsh_plugins() -> None:
    """Install ZSH plugins."""
    # The list of ZSH plugins to install
    plugins = (
        "zsh-users/zsh-syntax-highlighting"
        "zsh-users/zsh-autosuggestions"
        "zsh-users/zsh-completions"
        "le0me55i/zsh-extract"
        "ael-code/zsh-colored-man-pages"
    )

    # The location on the filesystem to store the plugins
    zsh_plugin_dir = Path(f"{Path.home()}/.zsh/plugins")

    # Create the plugins directory if it doesn't already exists
    if not zsh_plugin_dir.exists() and not zsh_plugin_dir.is_dir():
        Path.mkdir(zsh_plugin_dir)

    # Attempt to install the ZSH plugins from GitHub to its respective location
    for plugin in plugins:
        try:
            subprocess.run(["git", "clone", f"git@github.com{plugin}", zsh_plugin_dir])
        except subprocess.CalledProcessError as error:
            print(f"{ERROR} Failed to install ZSH plugins...\n{error}")


def setup_dotfiles() -> None:
    """Set up dotfiles for the system."""
    dotfiles_dir = Path(f"{Path.home()}/.dotfiles")

    # INFO: Create the "~/.dotfiles" directory if it doesn't already exists
    if not dotfiles_dir.exists() and not dotfiles_dir.is_dir():
        Path.mkdir(dotfiles_dir)

    # INFO: Attempt to download the dotfiles from the remote repository on GitHub
    try:
        subprocess.run(
            ["git", "clone", "git@github.com:Jarmos-san/dotfiles", dotfiles_dir]
        )
    except subprocess.CalledProcessError as error:
        print(f"{ERROR} Failed to clone remote dotfiles repository...\n{error}")

    # INFO: Check if the contents of the ".dotfiles" repository are already
    # symlinked, if yes then attempt to remove the links
    for content in Path.iterdir(dotfiles_dir / "dotfiles"):
        if content.is_symlink():
            content.unlink(missing_ok=True)

    # INFO: Create symlinks of the contents from "~/.dotfiles/dotfiles" directory
    for content in Path.iterdir(dotfiles_dir / "dotfiles"):
        content.symlink_to(target=f"{Path.home()}/{content}", target_is_directory=True)


def install_docker() -> None:
    """Install Docker for the system."""
    pass


def install_node() -> None:
    """
    Install Node.js for the system.

    INFO: It is necessary to Node.js through the recommended approach instead of
    Homebrew because of issues with TypeScript complaining about the localtion of npm.
    See the folowing issue thread for more information on this regards:
    https://github.com/microsoft/TypeScript/issues/23924
    """
    pass


def main() -> None:
    """Entrypoint of the script."""
    args = argument_parser()

    # INFO: Run simulation if the "--dry-run" flag is passed to the script
    if args.dry_run:
        simulate_dry_run()

    print(
        f"{WARNING} Running the script can cause system corruption or worse!",
        end=" ",
    )

    # INFO: Prompt users for a response based on the warning above
    user_warning = input("Proceed? [y/N]:  ").lower()

    # INFO: Handle the logic based on the user response
    match user_warning:
        # INFO: If user chose to abort the automation script then prompt to perform
        # dry-run instead. By default, it'll run the simulation unless explicitly
        # prompted not to.
        case "n" | "no" | "":
            print(
                f"{INFO} Aborting automation script...",
                end=" ",
            )

            dry_run_response = input("dry run instead? [Y/n]").lower()

            if dry_run_response in ("y", "yes", ""):
                simulate_dry_run()
        case "y" | "yes":
            print(f"{INFO} Running automatic system setup right now...")
        case _:
            print(f"{ERROR} Unknown response...aborting!")

    # INFO: Procedurally run one automation task after the other, the order probably
    # matters in certain sections of the logic.
    run_system_updates()
    install_homebrew()
    install_system_essentials()
    install_fonts()
    install_brew_packages()
    install_flatpak()
    install_flatpak_packages()
    install_zsh_plugins()
    setup_dotfiles()
    install_docker()
    install_node()


if __name__ == "__main__":
    main()
