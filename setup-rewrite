#!/usr/bin/env python3

"""
Script to automatically setup a fresh new Linux/MacOS system (or VM).

This script should ONLY be used after installing a fresh new OS on a new machine or
inside a VM to setup a development environment automatically. The script will install
necessary tools like Code Editors, package managers and more before setting up their
configuration files automatically.

USAGE: To use the script, run the following command (its not ready for usage yet);

curl -fsSL https://raw.githubusercontent.com/<username>/<repository>/path/to/script \
    | python3 - --dry-run

NOTE: The script is designed to be subjective, hence it is RECOMMENDED to NOT invoke it
without understanding the context of the contents! Please read through the script or
reach out to the author for clarification on what certain parts of the script does.

DISCLAIMER: The script IS NOT TESTED and there is no guranteed it works properly!

Author: Somraj Saha <somraj.saha@weburz.com>
License: MIT (see the LICENSE document for more info on this regards)
"""

# TODO: Make use of the logging module instead of useless print statements

import platform
import subprocess
import time
from argparse import ArgumentParser, Namespace

# Fetch and store the OS name to be used later on in the script
OS_NAME = platform.freedesktop_os_release().get("NAME")


def argument_parser() -> Namespace:
    """Parse the list of arguments passed to the script and return them."""
    parser = ArgumentParser(
        description="Automation script to setup a dev environment on a new machine!"
    )

    parser.add_argument(
        "--dry-run",
        required=False,
        help="Enable the script without making serious changes to the system.",
        action="store_true",
    )

    return parser.parse_args()


def system_update_simulation() -> None:
    """Simulate a system update (when the "dry_run" arguments are passed)."""
    print("Simulating system updates...")

    # Print a bunch of dots across 10 lines for roughly around 30 secs
    for _ in range(10):
        print("...")
        time.sleep(3)

    print("System upgrade simulation complete...")


def run_apt_updates(dry_run: bool) -> None:
    """
    Run APT to update a Debian/Ubuntu system and perform some cleanup actions.

    dry_run (boolean): Flag to configure the apt-get statements to run either in dry
                       mode or not.
    """
    if not dry_run:
        subprocess.run(["sudo", "apt-get", "update"])
        subprocess.run(["sudo", "apt-get", "upgrade", "--assume-yes"])
        subprocess.run(["sudo", "apt-get", "autoremove", "--purge"])
    else:
        system_update_simulation()


def run_macos_updates(dry_run: bool) -> None:
    """Automate MacOS system updates."""
    if not dry_run:
        try:
            subprocess.run(["sudo", "softwareupdate", "-i", "-a"])
        except subprocess.CalledProcessError as error:
            print("MacOS system update failed...")
            print(error)
    else:
        system_update_simulation()


def run_system_updates(dry_run: bool = True) -> None:
    """
    Detect the Operating System name and run some system updates on it.

    dry_run (boolean): Defaults to True which configures the function to run system
                       updates in dry mode explicitly.
    """
    if platform.system() == "Linux":
        match OS_NAME:
            case "Ubuntu" | "Debian":
                run_apt_updates(dry_run=dry_run)
            case _:
                print("Failed to identify the OS...aborting system updates!")
    elif platform.system() == "MacOS":
        run_macos_updates(dry_run=dry_run)
    else:
        print("Failed to identify the platform!")


def install_system_essentials(dry_run: bool = True) -> None:
    """Install certain essentials necessary for proper functioning of the system."""
    if platform.system() == "Linux":
        match OS_NAME:
            case "Ubuntu" | "Debian":
                if not dry_run:
                    try:
                        subprocess.run(
                            [
                                "sudo",
                                "apt-get",
                                "install",
                                "curl",
                                "git",
                                "--yes",
                                "--no-install-recommends",
                            ]
                        )
                    except subprocess.CalledProcessError as error:
                        print(error)
                else:
                    subprocess.run(
                        [
                            "sudo",
                            "apt-get",
                            "install",
                            "curl",
                            "git",
                            "--yes",
                            "--no-install-recommends",
                            "--dry-run",
                        ]
                    )
            case _:
                print("Failed to identify OS...aborting!")
    else:
        print("Unknown OS...aborting!")


def install_homebrew(dry_run: bool = True) -> None:
    """Install HomeBrew on MacOS and Ubuntu/Debian systems."""
    homebrew_installation_url = (
        "https://raw.githubusercontent.com/Homebrew/install/master/install.sh"
    )
    curl_command = (
        f"curl --fail --silent --show-error --location ${homebrew_installation_url}"
    )

    if not dry_run:
        # Install Homebrew only for MacOS and Ubuntu/Debian systems
        if platform.system() == "MacOS" or platform.system() == "Linux":
            try:
                subprocess.run(
                    ["NONINTERACTIVE=1 ", "/bin/bash", "-c", f'$"({curl_command})"']
                )
            except subprocess.CalledProcessError as error:
                print(f"Failed to install Homebrew: {error}")
        else:
            pass
    else:
        # TODO: Refactor the "system_update_simulation" to consider a Homebrew
        # installation as well
        print("Simulating Homebrew installation...")


def main() -> None:
    """Entrypoint of the script."""
    args = argument_parser()

    if not args.dry_run:
        run_system_updates(dry_run=False)
        install_homebrew(dry_run=False)
        install_system_essentials(dry_run=False)
    else:
        print('Running script in "dry" mode...')
        run_system_updates()
        install_homebrew()
        install_system_essentials()


if __name__ == "__main__":
    main()
